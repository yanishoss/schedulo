// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Event_Mode int32

const (
	Event_TIMESTAMP Event_Mode = 0
	Event_CRON      Event_Mode = 1
)

var Event_Mode_name = map[int32]string{
	0: "TIMESTAMP",
	1: "CRON",
}

var Event_Mode_value = map[string]int32{
	"TIMESTAMP": 0,
	"CRON":      1,
}

func (x Event_Mode) String() string {
	return proto.EnumName(Event_Mode_name, int32(x))
}

func (Event_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0, 0}
}

type Event struct {
	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CronExpression string `protobuf:"bytes,2,opt,name=cron_expression,json=cronExpression,proto3" json:"cron_expression,omitempty"`
	// Unix timestamp
	ShouldExecuteAt      int64      `protobuf:"varint,3,opt,name=should_execute_at,json=shouldExecuteAt,proto3" json:"should_execute_at,omitempty"`
	Mode                 Event_Mode `protobuf:"varint,4,opt,name=mode,proto3,enum=api.Event_Mode" json:"mode,omitempty"`
	Topic                string     `protobuf:"bytes,5,opt,name=topic,proto3" json:"topic,omitempty"`
	Payload              []byte     `protobuf:"bytes,6,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Event) GetCronExpression() string {
	if m != nil {
		return m.CronExpression
	}
	return ""
}

func (m *Event) GetShouldExecuteAt() int64 {
	if m != nil {
		return m.ShouldExecuteAt
	}
	return 0
}

func (m *Event) GetMode() Event_Mode {
	if m != nil {
		return m.Mode
	}
	return Event_TIMESTAMP
}

func (m *Event) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Event) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type Event_ID struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Event_ID) Reset()         { *m = Event_ID{} }
func (m *Event_ID) String() string { return proto.CompactTextString(m) }
func (*Event_ID) ProtoMessage()    {}
func (*Event_ID) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0, 0}
}

func (m *Event_ID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event_ID.Unmarshal(m, b)
}
func (m *Event_ID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event_ID.Marshal(b, m, deterministic)
}
func (m *Event_ID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event_ID.Merge(m, src)
}
func (m *Event_ID) XXX_Size() int {
	return xxx_messageInfo_Event_ID.Size(m)
}
func (m *Event_ID) XXX_DiscardUnknown() {
	xxx_messageInfo_Event_ID.DiscardUnknown(m)
}

var xxx_messageInfo_Event_ID proto.InternalMessageInfo

func (m *Event_ID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ScheduleRequest struct {
	Event                *Event   `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScheduleRequest) Reset()         { *m = ScheduleRequest{} }
func (m *ScheduleRequest) String() string { return proto.CompactTextString(m) }
func (*ScheduleRequest) ProtoMessage()    {}
func (*ScheduleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *ScheduleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScheduleRequest.Unmarshal(m, b)
}
func (m *ScheduleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScheduleRequest.Marshal(b, m, deterministic)
}
func (m *ScheduleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduleRequest.Merge(m, src)
}
func (m *ScheduleRequest) XXX_Size() int {
	return xxx_messageInfo_ScheduleRequest.Size(m)
}
func (m *ScheduleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduleRequest proto.InternalMessageInfo

func (m *ScheduleRequest) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type ScheduleResponse struct {
	Id                   *Event_ID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ScheduleResponse) Reset()         { *m = ScheduleResponse{} }
func (m *ScheduleResponse) String() string { return proto.CompactTextString(m) }
func (*ScheduleResponse) ProtoMessage()    {}
func (*ScheduleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}

func (m *ScheduleResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScheduleResponse.Unmarshal(m, b)
}
func (m *ScheduleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScheduleResponse.Marshal(b, m, deterministic)
}
func (m *ScheduleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduleResponse.Merge(m, src)
}
func (m *ScheduleResponse) XXX_Size() int {
	return xxx_messageInfo_ScheduleResponse.Size(m)
}
func (m *ScheduleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduleResponse proto.InternalMessageInfo

func (m *ScheduleResponse) GetId() *Event_ID {
	if m != nil {
		return m.Id
	}
	return nil
}

type UnscheduleRequest struct {
	Id                   *Event_ID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *UnscheduleRequest) Reset()         { *m = UnscheduleRequest{} }
func (m *UnscheduleRequest) String() string { return proto.CompactTextString(m) }
func (*UnscheduleRequest) ProtoMessage()    {}
func (*UnscheduleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}

func (m *UnscheduleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnscheduleRequest.Unmarshal(m, b)
}
func (m *UnscheduleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnscheduleRequest.Marshal(b, m, deterministic)
}
func (m *UnscheduleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnscheduleRequest.Merge(m, src)
}
func (m *UnscheduleRequest) XXX_Size() int {
	return xxx_messageInfo_UnscheduleRequest.Size(m)
}
func (m *UnscheduleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnscheduleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnscheduleRequest proto.InternalMessageInfo

func (m *UnscheduleRequest) GetId() *Event_ID {
	if m != nil {
		return m.Id
	}
	return nil
}

type UnscheduleResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnscheduleResponse) Reset()         { *m = UnscheduleResponse{} }
func (m *UnscheduleResponse) String() string { return proto.CompactTextString(m) }
func (*UnscheduleResponse) ProtoMessage()    {}
func (*UnscheduleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}

func (m *UnscheduleResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnscheduleResponse.Unmarshal(m, b)
}
func (m *UnscheduleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnscheduleResponse.Marshal(b, m, deterministic)
}
func (m *UnscheduleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnscheduleResponse.Merge(m, src)
}
func (m *UnscheduleResponse) XXX_Size() int {
	return xxx_messageInfo_UnscheduleResponse.Size(m)
}
func (m *UnscheduleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UnscheduleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UnscheduleResponse proto.InternalMessageInfo

type StreamEventsRequest struct {
	Topic                string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamEventsRequest) Reset()         { *m = StreamEventsRequest{} }
func (m *StreamEventsRequest) String() string { return proto.CompactTextString(m) }
func (*StreamEventsRequest) ProtoMessage()    {}
func (*StreamEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}

func (m *StreamEventsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamEventsRequest.Unmarshal(m, b)
}
func (m *StreamEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamEventsRequest.Marshal(b, m, deterministic)
}
func (m *StreamEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamEventsRequest.Merge(m, src)
}
func (m *StreamEventsRequest) XXX_Size() int {
	return xxx_messageInfo_StreamEventsRequest.Size(m)
}
func (m *StreamEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamEventsRequest proto.InternalMessageInfo

func (m *StreamEventsRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

type StreamEventsResponse struct {
	Event                *Event   `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamEventsResponse) Reset()         { *m = StreamEventsResponse{} }
func (m *StreamEventsResponse) String() string { return proto.CompactTextString(m) }
func (*StreamEventsResponse) ProtoMessage()    {}
func (*StreamEventsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}

func (m *StreamEventsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamEventsResponse.Unmarshal(m, b)
}
func (m *StreamEventsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamEventsResponse.Marshal(b, m, deterministic)
}
func (m *StreamEventsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamEventsResponse.Merge(m, src)
}
func (m *StreamEventsResponse) XXX_Size() int {
	return xxx_messageInfo_StreamEventsResponse.Size(m)
}
func (m *StreamEventsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamEventsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamEventsResponse proto.InternalMessageInfo

func (m *StreamEventsResponse) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func init() {
	proto.RegisterEnum("api.Event_Mode", Event_Mode_name, Event_Mode_value)
	proto.RegisterType((*Event)(nil), "api.Event")
	proto.RegisterType((*Event_ID)(nil), "api.Event.ID")
	proto.RegisterType((*ScheduleRequest)(nil), "api.ScheduleRequest")
	proto.RegisterType((*ScheduleResponse)(nil), "api.ScheduleResponse")
	proto.RegisterType((*UnscheduleRequest)(nil), "api.UnscheduleRequest")
	proto.RegisterType((*UnscheduleResponse)(nil), "api.UnscheduleResponse")
	proto.RegisterType((*StreamEventsRequest)(nil), "api.StreamEventsRequest")
	proto.RegisterType((*StreamEventsResponse)(nil), "api.StreamEventsResponse")
}

func init() {
	proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c)
}

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 395 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x4f, 0x8f, 0x93, 0x40,
	0x14, 0xdf, 0xa1, 0xb0, 0x2e, 0x6f, 0x77, 0x4b, 0xf7, 0x89, 0x3a, 0x92, 0x18, 0x09, 0x1e, 0x24,
	0x9a, 0x34, 0xca, 0x5e, 0xf4, 0x64, 0x36, 0x2e, 0x31, 0x3d, 0x54, 0x0d, 0xad, 0xe7, 0x06, 0x61,
	0x92, 0x92, 0xb4, 0x0c, 0x32, 0x83, 0xa9, 0xdf, 0xd2, 0x8f, 0xe3, 0xd1, 0x30, 0x14, 0x8a, 0xd4,
	0xa4, 0xc7, 0x79, 0xbf, 0xf7, 0x7e, 0xff, 0x32, 0x60, 0xc6, 0x45, 0x36, 0x2d, 0x4a, 0x2e, 0x39,
	0x8e, 0xe2, 0x22, 0xf3, 0xfe, 0x10, 0x30, 0xc2, 0x9f, 0x2c, 0x97, 0x38, 0x06, 0x2d, 0x4b, 0x29,
	0x71, 0x89, 0x6f, 0x46, 0x5a, 0x96, 0xe2, 0x4b, 0xb0, 0x92, 0x92, 0xe7, 0x2b, 0xb6, 0x2b, 0x4a,
	0x26, 0x44, 0xc6, 0x73, 0xaa, 0x29, 0x70, 0x5c, 0x8f, 0xc3, 0x6e, 0x8a, 0xaf, 0xe0, 0x46, 0xac,
	0x79, 0xb5, 0x49, 0x57, 0x6c, 0xc7, 0x92, 0x4a, 0xb2, 0x55, 0x2c, 0xe9, 0xc8, 0x25, 0xfe, 0x28,
	0xb2, 0x1a, 0x20, 0x6c, 0xe6, 0x77, 0x12, 0x5f, 0x80, 0xbe, 0xe5, 0x29, 0xa3, 0xba, 0x4b, 0xfc,
	0x71, 0x60, 0x4d, 0x6b, 0x37, 0x4a, 0x7e, 0x3a, 0xe7, 0x29, 0x8b, 0x14, 0x88, 0x36, 0x18, 0x92,
	0x17, 0x59, 0x42, 0x0d, 0xa5, 0xd7, 0x3c, 0x90, 0xc2, 0x83, 0x22, 0xfe, 0xb5, 0xe1, 0x71, 0x4a,
	0xcf, 0x5d, 0xe2, 0x5f, 0x45, 0xed, 0xd3, 0xb1, 0x41, 0x9b, 0xdd, 0x0f, 0xfd, 0x7b, 0xcf, 0x41,
	0xaf, 0x39, 0xf1, 0x1a, 0xcc, 0xe5, 0x6c, 0x1e, 0x2e, 0x96, 0x77, 0xf3, 0xaf, 0x93, 0x33, 0xbc,
	0x00, 0xfd, 0x63, 0xf4, 0xe5, 0xf3, 0x84, 0x78, 0xb7, 0x60, 0x2d, 0x92, 0x35, 0x4b, 0xab, 0x0d,
	0x8b, 0xd8, 0x8f, 0x8a, 0x09, 0x89, 0x2e, 0x18, 0xac, 0x76, 0xa3, 0x68, 0x2e, 0x03, 0x38, 0xf8,
	0x8b, 0x1a, 0xc0, 0x7b, 0x0b, 0x93, 0xc3, 0x91, 0x28, 0x78, 0x2e, 0x18, 0x3e, 0xeb, 0x94, 0x2f,
	0x83, 0xeb, 0x5e, 0xa4, 0xd9, 0xbd, 0x32, 0x12, 0xc0, 0xcd, 0xb7, 0x5c, 0x0c, 0x94, 0x4e, 0xdc,
	0xd8, 0x80, 0xfd, 0x9b, 0x46, 0xc8, 0x7b, 0x0d, 0x0f, 0x17, 0xb2, 0x64, 0xf1, 0x56, 0xed, 0x8a,
	0x96, 0xab, 0xeb, 0x8b, 0xf4, 0xfa, 0xf2, 0xde, 0x81, 0xfd, 0xef, 0xf2, 0xde, 0xed, 0xc9, 0x8c,
	0xc1, 0x6f, 0x02, 0x66, 0x1b, 0xb2, 0xc4, 0xf7, 0x70, 0xd1, 0x3e, 0xd0, 0x56, 0xcb, 0x83, 0xd6,
	0x9c, 0x47, 0x83, 0xe9, 0xde, 0xed, 0x19, 0x7e, 0x00, 0x38, 0xa4, 0xc0, 0xc7, 0x6a, 0xed, 0xa8,
	0x0a, 0xe7, 0xc9, 0xd1, 0xbc, 0x23, 0xf8, 0x04, 0x57, 0xfd, 0x0c, 0x48, 0x1b, 0xa5, 0xe3, 0x0e,
	0x9c, 0xa7, 0xff, 0x41, 0x5a, 0x9a, 0x37, 0xe4, 0xfb, 0xb9, 0xfa, 0xf2, 0xb7, 0x7f, 0x03, 0x00,
	0x00, 0xff, 0xff, 0xd7, 0xbf, 0x51, 0xe9, 0xff, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SchedulerClient is the client API for Scheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SchedulerClient interface {
	Schedule(ctx context.Context, in *ScheduleRequest, opts ...grpc.CallOption) (*ScheduleResponse, error)
	Unschedule(ctx context.Context, in *UnscheduleRequest, opts ...grpc.CallOption) (*UnscheduleResponse, error)
	StreamEvents(ctx context.Context, in *StreamEventsRequest, opts ...grpc.CallOption) (Scheduler_StreamEventsClient, error)
}

type schedulerClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulerClient(cc grpc.ClientConnInterface) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) Schedule(ctx context.Context, in *ScheduleRequest, opts ...grpc.CallOption) (*ScheduleResponse, error) {
	out := new(ScheduleResponse)
	err := c.cc.Invoke(ctx, "/api.Scheduler/Schedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) Unschedule(ctx context.Context, in *UnscheduleRequest, opts ...grpc.CallOption) (*UnscheduleResponse, error) {
	out := new(UnscheduleResponse)
	err := c.cc.Invoke(ctx, "/api.Scheduler/Unschedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) StreamEvents(ctx context.Context, in *StreamEventsRequest, opts ...grpc.CallOption) (Scheduler_StreamEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Scheduler_serviceDesc.Streams[0], "/api.Scheduler/StreamEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &schedulerStreamEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Scheduler_StreamEventsClient interface {
	Recv() (*StreamEventsResponse, error)
	grpc.ClientStream
}

type schedulerStreamEventsClient struct {
	grpc.ClientStream
}

func (x *schedulerStreamEventsClient) Recv() (*StreamEventsResponse, error) {
	m := new(StreamEventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SchedulerServer is the server API for Scheduler service.
type SchedulerServer interface {
	Schedule(context.Context, *ScheduleRequest) (*ScheduleResponse, error)
	Unschedule(context.Context, *UnscheduleRequest) (*UnscheduleResponse, error)
	StreamEvents(*StreamEventsRequest, Scheduler_StreamEventsServer) error
}

// UnimplementedSchedulerServer can be embedded to have forward compatible implementations.
type UnimplementedSchedulerServer struct {
}

func (*UnimplementedSchedulerServer) Schedule(ctx context.Context, req *ScheduleRequest) (*ScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Schedule not implemented")
}
func (*UnimplementedSchedulerServer) Unschedule(ctx context.Context, req *UnscheduleRequest) (*UnscheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unschedule not implemented")
}
func (*UnimplementedSchedulerServer) StreamEvents(req *StreamEventsRequest, srv Scheduler_StreamEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}

func RegisterSchedulerServer(s *grpc.Server, srv SchedulerServer) {
	s.RegisterService(&_Scheduler_serviceDesc, srv)
}

func _Scheduler_Schedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).Schedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Scheduler/Schedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).Schedule(ctx, req.(*ScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_Unschedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnscheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).Unschedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Scheduler/Unschedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).Unschedule(ctx, req.(*UnscheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SchedulerServer).StreamEvents(m, &schedulerStreamEventsServer{stream})
}

type Scheduler_StreamEventsServer interface {
	Send(*StreamEventsResponse) error
	grpc.ServerStream
}

type schedulerStreamEventsServer struct {
	grpc.ServerStream
}

func (x *schedulerStreamEventsServer) Send(m *StreamEventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Scheduler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Schedule",
			Handler:    _Scheduler_Schedule_Handler,
		},
		{
			MethodName: "Unschedule",
			Handler:    _Scheduler_Unschedule_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvents",
			Handler:       _Scheduler_StreamEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
